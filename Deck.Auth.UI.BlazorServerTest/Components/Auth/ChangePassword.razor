@page "/change-password"

@inject MyAuthStateProvider AuthStateProvider
@inject NavigationManager NavMgr
@inject IAuthService AuthService

@attribute [Authorize]

<PageTitle>Cambia Password</PageTitle>

<div class="container is-flex is-justify-content-center is-align-items-center">
    <div class="card" style="width: 100%; max-width: 500px;">
        <header class="card-header has-background-primary	">
            <p class="card-header-title">Cambia password</p>
        </header>
        <EditForm Model="passwordModel" FormName="ChangePasswordForm" OnValidSubmit="HandleChangePassword">
            <DataAnnotationsValidator />
@*             <ValidationSummary /> *@
            <div class="card-content">
                <div class="content">
                    <div class="field">
                        <label class="label">Vecchia password</label>
                        <div class="control">
                            <InputText class="input" type="password" @bind-Value="passwordModel.OldPassword" placeholder="Vecchia password" />
                        </div>
                        <p class="help is-danger">
                            <ValidationMessage For="@(() => passwordModel.OldPassword)" />
                        </p>
                    </div>

                    <div class="field">
                        <label class="label">Nuova password</label>
                        <div class="control">
                            <InputText class="input" type="password" @bind-Value="passwordModel.NewPassword" placeholder="Nuova Password" />
                        </div>
                        <p class="help is-danger">
                            <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                        </p>
                    </div>

                    <div class="field">
                        <label class="label">Conferma password</label>
                        <div class="control">
                            <InputText class="input" type="password" @bind-Value="passwordModel.ConfirmPassword" placeholder="Conferma Password" />
                        </div>
                        <p class="help is-danger">
                            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                        </p>
                    </div>
                </div>
                @if (errorMessage is not null)
                {
                    <div class="content">
                        <div class="notification is-danger is-light">
                            <button type="button" class="delete" @onclick="() => errorMessage=null"></button>
                            @errorMessage
                        </div>
                    </div>
                }
                @if (successMessage is not null)
                {
                    <div class="content">
                        <div class="notification is-success is-light">
                            <button type="button" class="delete" @onclick="() => successMessage=null"></button>
                            @successMessage
                        </div>
                    </div>
                }
            </div>
            <footer class="card-footer">
                <div class="card-footer-item">
                    <div class="buttons">
                        <button class="button is-warning" type="submit" @onclick="Cancel">Annulla</button>
                        <button class="button" type="submit">Applica</button>
                    </div>
                </div>
            </footer>
        </EditForm>
    </div>
</div>

@code {
    PasswordModel passwordModel = new();
    string? errorMessage;
    string? successMessage;

    private async Task HandleChangePassword()
    {
        if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
        {
            errorMessage = "Le nuove password non corrispondono";
            successMessage = null;
            return;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user is not null && user.Identity is not null && !user.Identity.IsAuthenticated)
        {
            NavMgr.NavigateTo("/login");
            return;
        }

        var username = user?.Identity?.Name;
        if (username is not null)
        {
            var result = await AuthService.ChangePassword(username, passwordModel.OldPassword, passwordModel.NewPassword);

            if (result)
            {
                successMessage = "Password cambiata con successo, disconnessione in corso...";
                errorMessage = null;
                await Task.Delay(1000);
                AuthStateProvider.Logout();
            }
            else
            {
                errorMessage = "La vecchia password non è corretta";
                successMessage = null;
            }
        }
    }

    void Cancel()
    {
        NavMgr.NavigateTo("/");
    }

    private class PasswordModel
    {
        [Required(ErrorMessage = "Richiesto inserimento vecchia password")]
        [DataType(DataType.Password)]
        public string OldPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Richiesto inserimento nuova password")]
        [DataType(DataType.Password)]
        [StringLength(20, ErrorMessage = "La password deve essere compresa tra i {2} e {1} caratteri", MinimumLength = 4)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Richiesta conferma nuova password")]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Le nuove password devono combaciare")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}